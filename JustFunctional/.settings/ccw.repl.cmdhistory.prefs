cmdhistory=["((moja 3) 4 5)" "(clojure.core/ns JustFunctional.First)\\n((moja 3) 4 5)\\n(clojure.core/ns user)" "(clojure.core/ns JustFunctional.First)\\n(def moja [z] (fn [x y] (+ x y z)))\\n(clojure.core/ns user)" "(clojure.core/ns JustFunctional.First)\\n(defn moja [z] (fn [x y] (+ x y z)))\\n(clojure.core/ns user)" "(def a1 (atom 2))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'JustFunctional.First)))" "@r1" "(ns JustFunctional.five)" "@r1" "@r2" "(dosync\\n(alter r1 debit 300)\\n(alter r2 credit 300))" "@r1" "@r2" ";; Switching to JustFunctional.five namespace" "@r1" "(tranfer-funds r2 r1 200)" "(defn transfer-funds [sender receiver amount]\\n  (dosync\\n   (alter sender debit amount)\\n   (alter receiver credit amount)))" "(tranfer-funds r2 r1 200)" "(transfer-funds r2 r1 200)" ";; Switching to JustFunctional.five namespace" "(transfer-funds [r1 r2 500])" ";; Switching to JustFunctional.five namespace" "(transfer-funds r1 r2 300)" "@r1" "@r2" "a2" "(println a2)" "s2" "a2" "(+ 5 8)" "(hypot 5 10)" "(hypot 4 5)" "(hypot 5 12)" "(credit r1 200)" "(hypot 5 4)" "(+ 5 4)" "(first v)" "(debit r2 100)" "(average [40 60 80])" "ns" "*ns*" "(ns five)" "*ns*" "(average [50 60 80])" "(hypot 5 4)" "(hypot 5 8)" "(first v)" "(-main)" "(index)" "(-main)" "(index \\"dsds\\")" "(println (index \\"dfdf\\"))" "(-main)" "(.stop -main)" "(defn index [par1] (html5\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t    [\:head\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t      [\:title \\"Hallo world\\"]]\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t    [\:body\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t      [\:div {\:id \\"content\\"} (str \\"Index page\\" par1)]\\r\\n               [\:div {\:id \\"content2\\"} \\r\\n                [\:form {\:action \\"/first\\" \:method \\"get\\"}\\r\\n\\t                (label \\"email  2\\" \\"E-mail\: \\")\\r\\n\\t                (text-field \\"email\\" \\"email\\")\\r\\n\\t                (label \\"password\\" \\"Password\: \\")\\r\\n\\t                (password-field \\"password\\" \\"password\\")\\r\\n\\t                (submit-button {\:id \\"loginButton\\"} \\"Log in\\")]]]))" "(map deref [(agent {\:c 42}) (atom 12)])" "(println a2)" "(deref a2)" "(deref a1)" "(deref a2)" "(server)" "(index \\"dsd\\")" "(server)" "(use JustFunctional.core)" "(server)" "(get ttt \:b)" "(server)" "(mg/connect)" "(monger.core/disconnect\!)" "(insert \\"document\\" { \:first_name \\"John\\" \:last_name \\"Lennon\\" })" "(mc/insert-and-return \\"documents\\" {\:name \\"John\\" \:age 30})" "(mg/connect)" "(mc/insert-and-return \\"documents\\" {\:name \\"John\\" \:age 30})" "(mg/connect)" "(monger.multi.collection/create \\"justFunctional\\" \\"users\\")" "(mmc/insert \\"documents\\" {\:first_name \\"John\\"  \:last_name \\"Lennon\\"})" "(mg/connect)" "(mmc/insert \\"documents\\" {\:first_name \\"John\\"  \:last_name \\"Lennon\\"})" "(mc/insert \\"documents\\" {\:first_name \\"John\\"  \:last_name \\"Lennon\\"})" "(server)" "(clojure.core/ns logic.just_core)\\n(defroutes routes\\n  (GET \\"/\\" [] \\"<h2>Hello World</h2>\\")\\n  (GET \\"/index\\" [] (index-page ))\\n  (GET \\"/login\\" [] (login-page))\\n  (GET \\"/register\\" [] (register-page))\\n;  (POST \\"/index\\" [name surname email password] (registration {\:name name \:surname surname \:email email \:password password}))\\n  (POST \\"/user-home\\" [email password] (user-home email password))\\n  (route/resources \\"/\\")\\n  (route/not-found \\"404 Page Not Found\\"))\\n(clojure.core/ns logic.just-core)" "(server)" "(ns logic.just_core)" "(server)" "(fn [name surname email password] \\r\\n  (try (\\r\\n         (do (println name) \\r\\n           (db/save-user name surname email password) (render-template \\"home\\" {\:name name})))\\r\\n    (catch Exception e (render-template \\"error\\" {\:error-message (.getMessage e)}) )))" "(registration \\"k\\" \\"k\\" \\"k\\" \\"k\\")" "(server)" "(db/log-in \\"anannik@gmail.com\\" \\"password\\")" "(ns db.mongodb)" "(+ 3 5)" "ns db.mongodb" "(logging \\"aaa\\" \\"aaa\\")" "ns db.mongodb" "(ns db.mongodb)" "(log-in \\"anci12_kg@hotmail.com\\" \\"password\\")" "(ns logic.just-core)" "(logging \\"aaa\\" \\"aaa\\")" "(ns just-core)" "(logging \\"anci12_kg@hotmail.com\\" \\"password\\")" "(ns logic.just-core)" "(server)" "(logging \\"anc\\" \\"ss\\")" "(logging \\"anci12_kg@hotmail.com\\" \\"password\\")" "(server)" "(ns just-config)" "(load-props \\"config.properties\\")" "(start)" "(read-properties \\"config.properties\\")" "(start)" "(settings)" "(read)" "(start)" "(load-props \\"a\\")" "(load-props \\"aa\\")" "(load-props \\"a\\")" "(load-props \\"ds\\")" "(load-props \\"s\\")" "(read)" "(load-props \\"config.properties\\")" "(load-props \\"resources\\\\config.properties\\")" "(load-props \\"resources\\\\\\\\config.properties\\")" "(load-props \\"config.properties\\")" "(println (seq (.getURLs (java.lang.ClassLoader/getSystemClassLoader))))" "(read-properties \\"config.properties\\")" "(read-properties \\"/config.properties\\")" "(read-properties \\"config.properties\\")" "(read-properties \\"public/config.properties\\")" "(defn props (load-props \\"config.properties\\"))" "(props)" "(load-props \\"file.properties\\")" "(read-properties \\"file.properties\\")" "(read-properties \\"public/file.properties\\")" "(read-properties \\"/public/file.properties\\")" "(slurp \\"public/file.properties\\")" "(slurp \\"public/file.txt\\")" "(read)" "(read-properties \\"config.properties\\")" "(read-properties \\"/config.properties\\")" "(read-properties \\"config\\")" "(def props (read-properties \\"config.properties\\" \:required [\:req-prop]))" "(read)" "(load-props \\"D\:/config.properties\\")" "(read-properties \\"D\:/config.properties\\")" "(read-properties \\"config.properties\\")" "(read-properties \\"src/logic/config.properties\\")" "(read-properties \\"resources/config.properties\\")" "(load-props \\"resources/config.properties\\")" " (load-props \\"resources/config.properties\\")" "props" "(server)" "(\:port config-props)" "(int (\:port config-props))" "(read-string (\:port config-props))" "(server)" "(get-config-prop \\"port\\" \\"true\\")" "(get-config-prop port true)" "(get-config-prop \\"port\\" \\"true\\")" "(get config-props \\"port\\")" "config-props" "(get config-props port)" "(get config-props \:port)" "(get config-props \:\\"port\\")" "(server)" "(config-props)" "config-props" "(server)" "(log>file \\"greskaaa\\")" "(log->file \\"da da da\\")" "(def writer (java.io.StringWriter.))" "(+ 3 5)" "(def retained-logger (print-logger writer))" "(+ 3 5)" "(*out*-logger \\"hello\\")" "(+ 3 5)" "(ns db.mongodb)" "(server)" "(+ 3 5)" "(def tb 5)" "5" "(+ 2 4)" "(ns logic.logger)" "(+ 3 5)" "(ns logic.logger)" "(log->file \\"sssss\\")" "(def *out*-logger (print-logger *out*))" "(ttrr)" "ttrr" "(log->file \\"tttt\\")" "(def *out*-logger (print-logger *out*))" "(*out*-logger \\"hello\\")" "(log->file \\"ssss\\")" "(log->file \\"RAAAADIIII PEDERUUUU JEDANNN\\")" "(just-log \\"INFO loggg\\")" "(just-log \\"INFO loggg\\" \\"opettt\\")" "(just-log)" "(just-log \\"loggggggg\\")" "(just-log \\"loggggggg555\\")" "(date-time)" "(local-now)" "(ttt)" "(format-local-time (local-now) (formatter \\"yyyyMMdd\\"))" "(format-local-time (local-now) \:basic-date-time)" "(show-formatters)" "ttt" "(just-log \\"opaaalaaa\\")" "(just-log \\"x\\" \\"xxx\\")" "(just-log \\"ddd\\" \\" tttt\\")" "(just-log \\"prvi\\" \\"drugi\\")" "(def s \#{\\"a\\" \\"b\\" \\"c\\"})" "(contains? s \\"c\\")" "(contains? s \\"j\\")" "(just-log \\"info\\" \\"BRanvo genije\\")" "(server)" "(slurp \\"text.txt\\")" "(def sss (split (slurp \\"resourcer/content/text.txt\\") \#\\"\\\\s+\\"))" "(def sss (split (slurp \\"resource/content/text.txt\\") \#\\"\\\\s+\\"))" "(def sss (split (slurp \\"resources/content/text.txt\\") \#\\"\\\\s+\\"))" "sss" "words" "line" "(split (slurp search-file) \#\\"\\\\s+\\")" "(split (slurp search-file) \#\\"\\\\s+(+)+\\")" "line" "(conj line dd)" "(def t (conj line \\"dfdf\\"))" "(conj line \\"dfdf\\")" "(def x (transient []))" "(conj x \\"ddd\\")" "(conj x line)" "(def y (conj\! x 1))" "line" "index" "(index)" "(index \\"resources/content/text.txt\\")" "(defn index [file-name] \\r\\n  (let [word-list (split (slurp search-file) \#\\"\\\\s+\\")]\\r\\n    (for [i (count word-list)] (println (nth lines i)) )))" "(index \\"resources/content/text.txt\\")" "(defn index1 [file-name] \\r\\n     (let [word-list (split (slurp search-file) \#\\"\\\\s+\\")]\\r\\n       (for [i word-list] (println (nth lines i)) )))" "(index1 \\"resources/content/text.txt\\")" "(index \\"resources/content/text.txt\\")" "(def x (transient []))" "(def y (conj\! x 1))" "(count y)" "(count x)" "(def y (conj\! x 50))" "(conj\! x 2)" "(def index-map (transient {}))" "(assoc index-map \:b 2)" "(def index-map (transient {}))" "(def index-map (transient {\:b 2}))" "index-map" "(assoc index-map \:a 3)" "(defn vrange2 [n]\\r\\n  (loop [i 0 v (transient [])]\\r\\n    (if (< i n)\\r\\n      (recur (inc i) (conj\! v i))\\r\\n      (persistent\! v))))" "(vrange2 5)" "(conj\! index-map \:a 5)" "(conj\! index-map {\:a 5})" "(defn vrange [n]\\r\\n  (loop [i 0 v []]\\r\\n    (if (< i n)\\r\\n      (recur (inc i) (conj v i))\\r\\n      v)))" "(vrange 9)" "index-map" "(conj\! index-map {\:a 5})" "(defn index [file-name] \\r\\n  (let [lines (split-lines (slurp file-name))]\\r\\n    (for [line lines] \\r\\n      (for [word (get-words line)] \\r\\n        (do (println (str \\"red\: \\" line \\" --- rec \: \\" word \\"\\\\n\\")) (conj\! index-map {\:word line} ) )) )))" "(index \\"resources/content/text.txt\\")" "index-map" "(\:word index-map)" "(count index-map)" "liner" "(+ liner 1)" "liner" "(index \\"resources/content/text.txt\\")" "liner" "(index \\"resources/content/text.txt\\")" "(loop [x 10]\\r\\n  (when (> x 1)\\r\\n    (println x)\\r\\n    (recur (- x 2))))" "(index \\"resources/content/text.txt\\")" "(loop [i 5 acc 1]\\r\\n  (if (zero? i)\\r\\n    acc\\r\\n    (recur (dec i) (* acc i))))" "(loop [i (count [\\"a\\" \\"a\\" \\"a\\"])]\\n  (if (zero? i) (println i) ))" "(defn vrange [n]\\r\\n     (loop [i 0 v []]\\r\\n       (if (< i n)\\r\\n         (recur (println i) (conj v i))\\r\\n         v)))" "(vrange 5)" "(loop [i 0]\\r\\n  (when (< i 10)\\r\\n    (print i)\\r\\n    (recur (inc i)))\\n  i)" "(loop [i 0]\\r\\n     (when (< i 10)\\r\\n       (print i)\\r\\n       (recur (inc i)))\\r\\n     )" "(defn index [file-name] \\r\\n  (binding [lines (split-lines (slurp file-name))\\r\\n            row 0]\\r\\n    (loop [i 0 v []] \\r\\n      (if (< i (count lines))\\r\\n        (loop [word (get-words line)] \\r\\n          (do (println (str \\"red\: \\" line \\" --- rec \: \\" word \\"\\\\n\\" \\" red\\" line)) (merge-with v {\:word row} ) ))\\r\\n        v))))" "(defn index [file-name] \\r\\n  (binding [lines (split-lines (slurp file-name))\\r\\n            row 0]\\r\\n    (loop [i 0 v []] \\r\\n      (if (< i (count lines))\\r\\n        (loop [word (get-words (nth lines i))] \\r\\n          (do (println (str \\"red\: \\" line \\" --- rec \: \\" word \\"\\\\n\\" \\" red\\" i)) (merge-with v {\:word row} ) ))\\r\\n        v))))" "(defn index [file-name] \\r\\n  (binding [lines (split-lines (slurp file-name))\\r\\n            row 0]\\r\\n    (loop [i 0 v []] \\r\\n      (if (< i (count lines))\\r\\n        (loop [word (get-words (nth lines i))] \\r\\n          (do (println (str \\"red\: \\" i \\" --- rec \: \\" word \\"\\\\n\\" \\" red\\" i)) (merge-with v {\:word row} ) ))\\r\\n        v))))" "(index \\"resources/content/text.txt\\")" "(+ 2 5)" "(\:novi (index \\"resources/content/text.txt\\"))" "(index \\"resources/content/text.txt\\")"]
eclipse.preferences.version=1
